@{

    string hostResourceFileText = ((ViewBag.HostResourceFileText as string) ?? "");
    string dockerResourceFileText = ((ViewBag.DockerResourceFileText as string) ?? "");

    string ExtractSection(string input, string startMarker, string endMarker = null)
    {
        try
        {
            int startIndex = input.IndexOf(startMarker) + startMarker.Length;
            int endIndex = endMarker != null ? input.IndexOf(endMarker, startIndex) : input.Length;
            return input.Substring(startIndex, endIndex - startIndex).Trim();
        }
        catch
        {
            return "";
        }
    }

    string hostCpuInfo = ExtractSection(hostResourceFileText, "Host CPU Information:", "Host Memory Information:");
    string hostMemoryInfo = ExtractSection(hostResourceFileText, "Host Memory Information:", "Host Disk Information:");
    string hostDiskInfo = ExtractSection(hostResourceFileText, "Host Disk Information:");

    string dockerContainerStatus = ExtractSection(dockerResourceFileText, "Docker Container Status:", "Docker Resource Usage:");
    string dockerResourceUsage = ExtractSection(dockerResourceFileText, "Docker Resource Usage:");

    var result = new List<string> { "Name||CPU %||MEM Usage / LIMIT" };

    try
    {
        // Parse container status
        var containerLines = dockerContainerStatus.Split('\n', StringSplitOptions.RemoveEmptyEntries);
        var resourceLines = dockerResourceUsage.Split('\n', StringSplitOptions.RemoveEmptyEntries);

        // Dictionary to map container ID to resource usage details
        var resourceMap = new Dictionary<string, string[]>();

        for (int i = 1; i < resourceLines.Length; i++)
        {
            var columns = resourceLines[i].Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            resourceMap[columns[0]] = columns;
        }

        for (int i = 1; i < resourceLines.Length; i++)
        {
            var columns = resourceLines[i].Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            string containerName = columns[0];

            if (resourceMap.TryGetValue(containerName, out var resourceDetails))
            {
                string cpu = resourceDetails[1];
                string memUsage = resourceDetails[2] + " " + resourceDetails[3] + " " + resourceDetails[4];

                result.Add($"{containerName}||{cpu}||{memUsage}");
            }
        }
    }
    catch
    {
    }
}

<div class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12 col-sm-6 col-md-4">
                <div class="info-box mb-4">
                    <span class="info-box-icon bg-info elevation-1"><i class="fas fa-cog"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">CPU %</span>
                        <span class="info-box-number">
                            @if (!string.IsNullOrEmpty(hostCpuInfo))
                            {
                                if (double.TryParse(new string(hostCpuInfo.Where(c => char.IsDigit(c) || c == '.').ToArray()), out double numericValue))
                                {
                                    <text>
                                        @(numericValue.ToString("0.0"))
                                        <small>%</small>
                                    </text>
                                }
                            }
                        </span>
                    </div>
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4">
                <div class="info-box mb-4">
                    <span class="info-box-icon bg-success elevation-1"><i class="fas fa-memory"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">MEM Usage / LIMIT</span>
                        @if (!string.IsNullOrEmpty(hostMemoryInfo))
                        {
                            <text>
                                @{
                                    string[] temp = hostMemoryInfo.Replace("Memory: ", "").Split('/');

                                    string memUsageLimit = temp[1].Trim().ToString() + " / " + temp[0].Trim().ToString();
                                }
                                <span class="info-box-number">@(memUsageLimit)</span>
                            </text>
                        }
                    </div>
                </div>
            </div>
            <div class="clearfix hidden-md-up"></div>

            <div class="col-12 col-sm-6 col-md-4">
                <div class="info-box mb-4">
                    <span class="info-box-icon bg-danger elevation-1"><i class="fas fa-hdd"></i></span>

                    <div class="info-box-content">
                        <span class="info-box-text">Disk Usage / LIMIT</span>
                        @if (!string.IsNullOrEmpty(hostDiskInfo))
                        {
                            <text>
                                @{
                                    string[] temp = hostDiskInfo.Replace("Disk: ", "").Split('/');

                                    string diskUsageLimit = temp[1].Trim().ToString() + " / " + temp[0].Trim().ToString();
                                }
                                <span class="info-box-number">@(diskUsageLimit)</span>
                            </text>
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (result.Count > 1)
        {
            for (int i = 1; i < result.Count; i++)
            {
                string[] dockerContainerInfo = result[i].Split("||");

                <text>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="card-title">@(dockerContainerInfo[0])</h5>
                                    <div class="card-tools">
                                        <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                            <i class="fas fa-minus"></i>
                                        </button>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="row">
                                        <div class="info-box mb-3 bg-info">
                                            <span class="info-box-icon"><i class="fas fa-cog"></i></span>

                                            <div class="info-box-content">
                                                <span class="info-box-text">CPU %</span>
                                                <span class="info-box-number">@(dockerContainerInfo[1])</span>
                                            </div>
                                        </div>
                                        <div class="info-box mb-3 bg-success">
                                            <span class="info-box-icon"><i class="fas fa-memory"></i></span>

                                            <div class="info-box-content">
                                                <span class="info-box-text">MEM Usage / LIMIT</span>
                                                <span class="info-box-number">@(dockerContainerInfo[2])</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </text>
            }
        }
    </div>
</div>